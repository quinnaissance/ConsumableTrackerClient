package ca.cmpt213.a4.client.view;

import ca.cmpt213.a4.client.model.Consumable;
import ca.cmpt213.a4.client.model.ConsumableFactory;
import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeListener;
import java.time.LocalDate;


/**
 * Gathers user input to forge a new Consumable object
 *
 * @author Steven Quinn (301462499) – CMPT 213 D100 – Fall 2021
 */
public class ConsumableViewerAddPane extends JDialog {

    // Constructed Consumable that will be returned
    private Consumable newConsumable = null;
    private JPanel mainPanel;
    private JPanel typePanel;
    private JPanel infoPanel;
    private JPanel buttonPanel;
    private final String WINDOW_TITLE = "Add Item";

    // Fields
    private JLabel type;
    private JComboBox typeCombo;
    private JLabel name;
    private JTextField nameField;
    private JLabel notes;
    private JTextField notesField;
    private JLabel price;
    private JTextField priceField;
    private JLabel measurement;
    private JTextField measurementField;
    private JLabel expiry;
    private DatePicker dp;

    // Colour scheme
    private final Color ENABLED_COLOR = Utilities.ENABLED_COLOR;
    private final Color DISABLED_COLOR = Utilities.DISABLED_COLOR;
    private final Color VALID_COLOR = Utilities.VALID_COLOR;
    private final Color INVALID_COLOR = Utilities.INVALID_COLOR;
    private final Color FLASH_COLOR = Utilities.FLASH_COLOR;

    // Keep track of first run
    private boolean comboFirstRun;

    /**
     * Constructor
     */
    public ConsumableViewerAddPane() {
        super();
        comboFirstRun = true;
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

        // Window properties
        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        addFrameWindowListener();
        setResizable(false);
        setModal(true);
        setModalExclusionType(Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setTitle(WINDOW_TITLE);
        setSize(350, 300);

        // Panel for info fields
        infoPanel = new JPanel();
        initializeFields();
        initializeInfoPanelLayout();
        initializeFieldListeners();
        mainPanel.add(infoPanel);

        // Create/cancel buttons
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        buttonPanel.setBorder(new EmptyBorder(5, 5, 10, 5));
        JButton createButton = new JButton("Create");
        createButton.setEnabled(false);
        createButton.setToolTipText("You must enter valid information before creating a new item.");
        createButtonMouseListener(createButton);
        createButtonActionListener(createButton);

        // Cancel button
        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(e -> dispose());
        buttonPanel.add(createButton);
        buttonPanel.add(cancelButton);
        mainPanel.add(buttonPanel);

        // Button listener for valid fields -> unlocks when info is valid
        name.addPropertyChangeListener("foreground", getCreateButtonEnableListener(createButton));
        price.addPropertyChangeListener("foreground", getCreateButtonEnableListener(createButton));
        measurement.addPropertyChangeListener("foreground", getCreateButtonEnableListener(createButton));
        expiry.addPropertyChangeListener("foreground", getCreateButtonEnableListener(createButton));

        // Add panel to dialog
        add(mainPanel);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * Get the consumable item generated by user input
     *
     * @return Consumable item
     */
    public Consumable getConsumable() {
        return newConsumable;
    }

    /**
     * Helper method to setup infoPanel GridBagLayout
     */
    private void initializeInfoPanelLayout() {

        // GridBagLayout muck
        infoPanel.setLayout(new GridBagLayout());
        GridBagConstraints gblc = new GridBagConstraints();
        gblc.insets = new Insets(5, 6, 5, 6);
        gblc.weightx = 1;

        int gbc1 = GridBagConstraints.BOTH;
        int gbc2 = GridBagConstraints.HORIZONTAL;

        // Look away now if you don't want your eyes burning
        gblc.gridx = 0;
        gblc.gridy = 0;
        gblc.fill = gbc1;
        infoPanel.add(name, gblc);
        gblc.gridx = 1;
        gblc.fill = gbc2;
        infoPanel.add(nameField, gblc);
        gblc.gridx = 0;
        gblc.gridy = 1;
        gblc.fill = gbc1;
        infoPanel.add(notes, gblc);
        gblc.gridx = 1;
        gblc.fill = gbc2;
        infoPanel.add(notesField, gblc);
        gblc.gridx = 0;
        gblc.gridy = 2;
        gblc.fill = gbc1;
        infoPanel.add(price, gblc);
        gblc.gridx = 1;
        gblc.fill = gbc2;
        infoPanel.add(priceField, gblc);
        gblc.gridx = 0;
        gblc.gridy = 3;
        gblc.fill = gbc1;
        infoPanel.add(measurement, gblc);
        gblc.gridx = 1;
        gblc.fill = gbc2;
        infoPanel.add(measurementField, gblc);
        gblc.gridx = 0;
        gblc.gridy = 4;
        gblc.fill = gbc1;
        infoPanel.add(expiry, gblc);
        gblc.gridx = 1;
        gblc.fill = GridBagConstraints.CENTER;
        infoPanel.add(dp, gblc);
    }

    /**
     * Helper method to initialize input fields and labels
     */
    private void initializeFields() {
        // Layout for text fields
        FlowLayout flow = new FlowLayout();
        flow.setHgap(15);

        // Type label/field
        typePanel = new JPanel(flow);
        type = new JLabel("Type", SwingConstants.RIGHT);
        typePanel.setBorder(new EmptyBorder(10, 5, 5, 5));
        typeCombo = new JComboBox(ConsumableViewer.consumableType.values());
        typeCombo.setEditable(false);
        typeCombo.setSelectedIndex(-1);
        typeCombo.setToolTipText("Pick a Consumable type.");
        typePanel.add(type);
        typePanel.add(typeCombo);
        mainPanel.add(typePanel);

        // Name label/field
        name = new JLabel("Name", SwingConstants.RIGHT);
        nameField = new JTextField("", 20);
        nameField.setEnabled(false);
        nameField.setBackground(DISABLED_COLOR);
        nameField.setToolTipText("Select a type first.");

        // Notes label/field
        notes = new JLabel("Notes", SwingConstants.RIGHT);
        notesField = new JTextField("", 20);
        notesField.setEnabled(false);
        notesField.setBackground(DISABLED_COLOR);
        notesField.setToolTipText("Select a type first.");

        // Price label/field
        price = new JLabel("Price", SwingConstants.RIGHT);
        priceField = new JTextField("", 8);
        priceField.setEnabled(false);
        priceField.setBackground(DISABLED_COLOR);
        priceField.setToolTipText("Select a type first.");

        // Weight/volume label/field
        measurement = new JLabel("Measurement", SwingConstants.RIGHT);
        measurementField = new JTextField("", 8);
        measurementField.setEnabled(false);
        measurementField.setBackground(DISABLED_COLOR);
        measurementField.setToolTipText("Select a type first.");

        // Expiry date picker
        expiry = new JLabel("Expiry date", SwingConstants.RIGHT);
        dp = new DatePicker();
        DatePickerSettings dps = new DatePickerSettings();
        JButton dpButton = dp.getComponentToggleCalendarButton();
        dpButton.setText("");
        dpButton.setIcon(new ImageIcon("resources/cal4.png"));
        dpButton.setBackground(Color.white);
        dps.setFormatForDatesCommonEra("uuuu-MM-dd");
        dp.setSettings(dps);
        dp.setEnabled(false);
        dp.getComponentDateTextField().setBackground(DISABLED_COLOR);
    }

    /**
     * Helper method to initialize all listeners for validation-related JLabels/JTextFields/etc.
     */
    private void initializeFieldListeners() {
        // Listeners
        typeCombo.addActionListener(e -> { // ComboBox modifications

            // Check for first run
            if (comboFirstRun) {
                // First selection -> enable all fields
                nameField.setEnabled(true);
                nameField.setBackground(ENABLED_COLOR);
                nameField.setToolTipText("Pick a name (cannot be blank)");
                notesField.setEnabled(true);
                notesField.setBackground(ENABLED_COLOR);
                notesField.setToolTipText("Notes can be anything (including blank).");
                priceField.setEnabled(true);
                priceField.setBackground(ENABLED_COLOR);
                priceField.setToolTipText("Enter any positive number.");
                measurementField.setEnabled(true);
                measurementField.setBackground(ENABLED_COLOR);
                measurementField.setToolTipText("Enter any positive number.");
                dp.setEnabled(true);
                dp.getComponentDateTextField().setBackground(ENABLED_COLOR);
                dp.setBackground(ENABLED_COLOR);
                dp.setToolTipText("Type or pick a valid date.");
            }

            // If combobox isn't blank, modify measurement label based on selection
            if (typeCombo.getSelectedIndex() != -1) {
                // Change measurement text based on selected type
                if (typeCombo.getSelectedItem() == ConsumableViewer.consumableType.FOOD)
                    measurement.setText("Weight");
                else if (typeCombo.getSelectedItem() == ConsumableViewer.consumableType.DRINK)
                    measurement.setText("Volume");
            }

            // Signal first run has been completed
            comboFirstRun = false;
        });
        nameField.getDocument().addDocumentListener(new DocumentListener() { // Verify name field
            @Override
            public void insertUpdate(DocumentEvent e) {
                validate();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validate();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validate();
            }

            public void validate() {
                // Validate non-empty string
                if (nameField.getText().isBlank()) {
                    name.setForeground(INVALID_COLOR);
                } else {
                    name.setForeground(VALID_COLOR);
                }
            }
        });
        priceField.getDocument().addDocumentListener(new DocumentListener() { // Verify price field
            @Override
            public void insertUpdate(DocumentEvent e) {
                validate();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validate();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validate();
            }

            public void validate() {
                // Validate non-numeric
                String text = priceField.getText();

                // Verify decimal value
                if (text.length() >= 1) {
                    try {
                        double parsed = Double.parseDouble(text);
                        if (parsed > 0) {
                            price.setForeground(VALID_COLOR);
                        } else {
                            price.setForeground(INVALID_COLOR);
                        }
                    } catch (Exception e) {
                        price.setForeground(INVALID_COLOR);
                    }
                } else {
                    price.setForeground(INVALID_COLOR);
                }
            }
        });
        measurementField.getDocument().addDocumentListener(new DocumentListener() { // Verify measurement field
            @Override
            public void insertUpdate(DocumentEvent e) {
                validate();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validate();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validate();
            }

            public void validate() {
                // Validate non-numeric
                String text = measurementField.getText();

                // Verify decimal value
                if (text.length() >= 1) {
                    try {
                        double parsed = Double.parseDouble(text);
                        if (parsed > 0) {
                            measurement.setForeground(VALID_COLOR); // Valid
                        } else {
                            measurement.setForeground(INVALID_COLOR);
                        }
                    } catch (Exception e) { // Invalid double
                        measurement.setForeground(INVALID_COLOR);
                    }
                } else { // Empty field
                    measurement.setForeground(INVALID_COLOR);
                }
            }
        });
        dp.addPropertyChangeListener("text", evt -> { // Date picker validation
            LocalDate date;
            if (!dp.getText().isBlank() && dp.isTextFieldValid()) {
                date = dp.getDate();
                if (date.getYear() > 0) {
                    expiry.setForeground(VALID_COLOR);
                } else { // Date cannot be negative
                    expiry.setForeground(INVALID_COLOR);
                }
            } else {
                expiry.setForeground(INVALID_COLOR);
            }
        });
    }

    /**
     * Add WindowListener of this current JFrame
     */
    private void addFrameWindowListener() {
        addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosing(WindowEvent e) {
                windowClosed(e);
            }

            @Override
            public void windowClosed(WindowEvent e) {
                setVisible(false);
                dispose();
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
    }

    /**
     * Helper method to enable create button when all fields are valid
     *
     * @param createButton Button to enable
     * @return Listener object
     */
    public PropertyChangeListener getCreateButtonEnableListener(JButton createButton) {
        PropertyChangeListener labelListener = evt -> {
            if (typeCombo.getSelectedIndex() != -1) {
                // Create button only unlocks when all information is valid
                createButton.setEnabled(name.getForeground() == VALID_COLOR
                        && price.getForeground() == VALID_COLOR
                        && measurement.getForeground() == VALID_COLOR
                        && expiry.getForeground() == VALID_COLOR);
            }
        };
        return labelListener;
    }

    /**
     * Helper method for creatButton action listener
     * Changes consumable field if input is valid
     * @param createButton
     */
    private void createButtonActionListener(JButton createButton) {
        createButton.addActionListener(e -> { // Create button listener
            // Precondition: all fields valid, typeCombo selectedIndex != -1

            // Construct newConsumable based on type selected
            switch ((ConsumableViewer.consumableType) typeCombo.getSelectedItem()) {
                case FOOD -> newConsumable = ConsumableFactory.getInstance("food", nameField.getText(), notesField.getText(),
                        Double.parseDouble(priceField.getText()), Double.parseDouble(measurementField.getText()),
                        dp.getDate());
                case DRINK -> newConsumable = ConsumableFactory.getInstance("drink", nameField.getText(), notesField.getText(),
                        Double.parseDouble(priceField.getText()), Double.parseDouble(measurementField.getText()),
                        dp.getDate());
            }

            // Close window
            setVisible(false);
            dispose();
        });
    }

    /**
     * Helper method for createButton MouseListener (shows dialog, flashes JTextFields)
     * @param createButton Create button
     */
    private void createButtonMouseListener(JButton createButton) {
        createButton.addMouseListener(new MouseListener() { // Create click listener (only for when disabled)
            @Override
            public void mouseClicked(MouseEvent e) {

                // Button is disabled and a type is selected -> flash fields needing validation
                if (!createButton.isEnabled() && typeCombo.getSelectedIndex() != -1) {

                    int delay = 80;
                    int total = 800;
                    if (name.getForeground() != VALID_COLOR)
                        Utilities.flashingJTextField(nameField, FLASH_COLOR, delay, total);
                    if (price.getForeground() != VALID_COLOR)
                        Utilities.flashingJTextField(priceField, FLASH_COLOR, delay, total);
                    if (measurement.getForeground() != VALID_COLOR)
                        Utilities.flashingJTextField(measurementField, FLASH_COLOR, delay, total);
                    if (expiry.getForeground() != VALID_COLOR)
                        Utilities.flashingJTextField(dp.getComponentDateTextField(), FLASH_COLOR, delay, total);
                }

                // Button is disabled -> show dialog
                if (!createButton.isEnabled()) {

                    // Dialog slightly offset to show field highlighting
                    JOptionPane jop = new JOptionPane();
                    jop.setMessage("Please verify the required fields.");
                    JDialog jd = jop.createDialog(ConsumableViewerAddPane.this, "Error");
                    jd.setModalityType(Dialog.ModalityType.DOCUMENT_MODAL);
                    jd.setAlwaysOnTop(true);

                    Point loc = getLocation();
                    loc.translate((int) (getWidth() * 0.6), (int) (getHeight() * 0.325));
                    jd.setLocation(loc.x, loc.y);
                    jd.setVisible(true);
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

}
